#ifndef _GA_QAP_H_
#define _GA_QAP_H_

#include <algorithm>
#include <climits> // INT_MAX
#include <iostream>
#include <utility>
#include <vector>
#include "qap.h"

struct Individual
{
	int* perm;
	int fitness;
};

class GA_QAP 
{
	private:
		
		/* this is a QAP solution  */
		int* chromossome;

		int size_initial_population;

		std::vector<int*> population;

		/** instance size of QAP */
		int size_problem;

		QAP *problem;

		/**
		 * mutation rate, initial with 20%
		 */
		int mutation_rate;

		int* current_best_individual;

		int fitness_of_current_best_individual;

		bool improved;

		int position_local_optimization = 0;

		void improve_solution ( int index );

	public:

		/**
		 * @brief      Constructs the object.
		 *
		 * @param      problem       The problem
		 * @param[in]  size_problem  The size problem
		 */
		GA_QAP(QAP *problem, int size_initial_population);

		/**
		 * @brief      Destroys the object.
		 */
		~GA_QAP();

		/**
		 * @brief      Generates an initial population randomly
		 */
		void generate_initial_population();

		/**
		 * @brief      Randomly select two individuals to apply crossover
		 *
		 * @return     the new individual generated
		 */
		int* selection ();

		/**
		 * @brief      Producing a new feasible solution (i.e., a child) 
		 			   by combining two individuals. 
		 *
		 * @param      i     the father
		 * @param      j     the mother
		 *
		 * @return     the new individual generated by combining i and j
		 */
		int* crossover(int* father, int* mother);

		/**
		 * @brief       Increasing diversity in the population by introducing
		 				random variations in the members of the population. 
		 */
		void mutation();

		/**
		 * @brief      realize a swap number 1 with number 2 in individual
		 *
		 * @param[in]  num1       The number 1
		 * @param[in]  num2       The number 2
		 * @param[in]  individual The individual
		 */
		void swap(int num1, int num2, int* individual);

		void verify_condition_path_swap (int* father, int* mother, int position);

		/**
		 * @brief      print the individuals of population
		 */
		void print_population();

		/**
		 * @brief      Determines if dominate.
		 *
		 * @param      individual  The individual
		 *
		 * @return     True if dominate, False otherwise.
		 */
		bool is_dominate(int* individual);

		int get_fitness_current_best_solution();

		/**
		 * @brief      optimizes 20% of the current population through 
		 *             a neighborhood search      
		 */
		void local_optimization ();

		void run();

		int delta_value_linear(int i, int j, int* pi);

};


#endif